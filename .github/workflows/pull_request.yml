name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - 'main'

jobs:
  build:

    name: NodeJS Install
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

  build-backend:

    needs: build
    name: Backend Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Backend Dependencies
        uses: actions/cache@v3
        with:
          path: ./back-end/node_modules
          key: backend-${{ runner.os }}-${{ hashFiles('back-end/yarn.lock') }}
          restore-keys: |
            backend-${{ runner.os }}-

      - name: Install Dependencies (Backend)
        run: yarn install
        working-directory: ./back-end

      - name: Build Backend
        run: yarn build
        working-directory: ./back-end

  build-frontend:

    needs: build
    name: Frontend Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Frontend Dependencies
        uses: actions/cache@v3
        with:
          path: ./front-end/node_modules
          key: frontend-${{ runner.os }}-${{ hashFiles('front-end/yarn.lock') }}
          restore-keys: |
            frontend-${{ runner.os }}-

      - name: Install Dependencies (Frontend)
        run: yarn install
        working-directory: ./front-end

      - name: Build Frontend
        run: yarn build
        working-directory: ./front-end

  docker:

    needs:
      - build-backend
      - build-frontend
    name: Docker Build and Push to Amazon ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and Push Backend
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Define the ECR repository URL
          ECR_REPO_URL=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/med-store-backend
          
          # Build the Docker image
          docker build -t $ECR_REPO_URL:latest ./back-end -f ./back-end/Dockerfile.prod
          
          # Push the Docker image
          docker push $ECR_REPO_URL:latest

      - name: Build and Push Frontend
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Define the ECR repository URL
          ECR_REPO_URL=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/med-store-frontend
          
          # Build the Docker image
          docker build -t $ECR_REPO_URL:latest ./front-end -f ./front-end/Dockerfile.prod
          
          # Push the Docker image
          docker push $ECR_REPO_URL:latest

      - name: Build and Push Nginx
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Define the ECR repository URL
          ECR_REPO_URL=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/med-store-nginx
          
          # Build the Docker image
          docker build -t $ECR_REPO_URL:latest ./nginx -f ./nginx/Dockerfile
          
          # Push the Docker image
          docker push $ECR_REPO_URL:latest
